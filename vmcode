code:
    inpv [value]
    2 byte
    000 + [value](12 bit) + extend_or_not(1 bit)
        - Assign the value of 'value' to the register $V
        - value range: -2048 ~ 2047
        - The value can be extended

    copy $[a] $[b]
    2 byte
    001 + [register a](3 bit) + [register b](3 bit) + 0_or_1(7 bit)
        - Copy the value of register $[a] to register $[b]
        - Not extendable

    jump $[a] $[b]
    1 byte
    010 + [register a](3 bit) + 0_or_1(2 bit)
        - If register $[b] contains True, jump to the address in $[a]
        - Not extendable

    comp $[a] [C-code] $[b]
    2 byte
    011 + [register a](3 bit) + [jump code](3 bit) + [register b](3 bit) + 0_or_1(4 bit)
        - Save the result of the C-code comparison to register $C
        - C-code:
            000 nv Never
            001 >  $[a] >  $[b]
            010 == $[a] == $[b]
            011 >= $[a] >= $[b]
            100 <  $[a] <  $[b]
            101 != $[a] != $[b]
            110 <= $[a] <= $[b]
            111 aw Always

    [operation]r $[a] $[b] $[c]
    2 byte
    100 [operation](3 bit) + [register a](3 bit) + [register b](3 bit) + [register c](3 bit) + 0_or_1(1 bit)
        - Perform the specified operation on $[a] and $[b], and save the result in $[c]
        - operation:
            000 add
            001 sub
            010 mul
            011 div
            100 rmv  # right shift
            101 lmv  # left shift
            110 and
            111 or_
        - Not extendable

    exte [value]
    2 byte
    101 + [value](15 bit) + extend_or_not(1 bit)
        - If extend_or_not == 1, add the given value to the current extendable value
        - The value can be extended

    sett [0~7]
    1 byte
    110 + [0~7](3 bit) + 0_or_1(2 bit)
        - Specify which of the 8 sub-registers in $T to use

register:
    $A: Address   000
    $C: Condition 001
    $D: Data      010
    $L: Local     011
    $M: Memory    100
    $P: Pointer   101
    $T: Temporary 110
    $V: Value     111

    # $A, $C, and $V are reserved for specific instruction operations and should not be set manually.
    # The result of conditional operations is stored in $C for further branching logic.
    # $T contains 8 sub-registers (N0 to N7). Use the `setn` instruction to select the active sub-register.
    # $M represents memory, with its specific address determined by the value in $A.
    # $D, $L, and $P are available for general-purpose use.
    # Suggested usage:
        # $L for the local base address
        # $P for the stack top
        # in constructor or method, "@L 0" == "self"

    $[register]
        - Operate on the value in the specified register

    @[register]
        - Operate on the address pointed to by the specified register

syntactic sugar:
    setv $[a] [value]
        inpv [value]
        copy $V $[a]

    j-if $[a] $[b] [C-code] $[c]
        comp $[b] [C-code] $[c]
        jump $[a] $C

    load @[a] $[b]
        - Equivalent to: copy @[a] $[b]
        copy $[a] $A
        copy $M $[b]

    stor @[a] $[b]
        - Equivalent to: copy $[b] @[a]
        copy $[a] $A
        copy $[b] $M

    [operation]v $[a] [value] $[c]
        inpv [value]
        [operation]r $[a] $V $[c]

    setl "[label]"
        - Define a label

    getl $[a] "[label]"
        - Assign the address of the label to the specified register
        setv $[a] [value]

    # The setl and getl instructions are pseudo-instructions handled by the assembler.

non-standard syntactic sugar:
    - Uses general-purpose registers and is therefore marked as "non-standard"

    push @[a] [value]
        - Push the value at @[a] offset by [value] onto the stack
        sett 7
        addv $[a] [value] $T
        load @T $D
        sett 0
        stor @P $D
        addv $P 1 $P

    push @[a]
        - Push the value at the address pointed to by $[a] onto the stack
        load @[a] $D
        stor @P $D
        addv $P 1 $P

    push $[a]
        - Push the value of $[a] onto the stack
        stor @P $[a]
        addv $P 1 $P

    push $[a] [value]
        - Push the value of $[a] + [value] onto the stack
        addv $[a] [value] $D
        stor @P $D
        addv $P 1 $P

    push [value]
        - Push the value onto the stack
        intv [value]
        push $V

    pop @[a] [value]
        - Pop a value from the stack and store it at $[a] offset by [value]
        subv $P 1 $P
        load @P $D
        sett 7
        addv $[a] [value] $T
        stor @T $D
        sett 0

    pop @[a]
        - Pop a value from the stack and store it at the address pointed to by $[a]
        subv $P 1 $P
        load @P $D
        stor @[a] $D

    pop $[a]
        - Pop a value from the stack and store it in $[a]
        subv $P 1 $P
        load @P $D
        copy $[a] $D

    goto "[label]" [true | false | all]
        getl $T "[label]"
        if true:
            pop $C
        if false:
            pop $C
            inpv 0
            comp $C == $V
        if all
            setv $C 1
        jump $T $C

    label [label]
        setl "[label]"

    alloc [value]
        - Allocate memory of size [value] from the heap and return the base address
        - Return the base address: Push the address onto the stack pointed to by $P

    call [function name] [number of argument]
        - Jump to the address of [function name]
        - Read arguments from $P and decrement $P by [number of argument]

    return
        - Jump back to the previous address
        - Push the return value onto the stack pointed to by $P
