code:
    in-v [value]
    2 byte
    000 + [value](12 bit) + extend_or_not(1 bit)
        - Set the value of register 'V'alue to 'value'
        - value: -2048 ~ 2047
        - value can be extended

    copy $[a] $[b]
    2 byte
    001 + [register a](3 bit) + [register b](3 bit) + 0_or_1(7 bit)
        - Copy the value of 'a' to 'b'
        - Not extendable

    jump $[a] $[b]
    1 byte
    010 + [register a](3 bit) + 0_or_1(2 bit)
        - if $[b] is True, jump to address 'a'
        - Not extendable

    comp $[a] [C-code] $[b]
    2 byte
    011 + [register a](3 bit) + [jump code](3 bit) + [register b](3 bit) + 0_or_1(4 bit)
        - Store the result of C-code comparison into $C
        - C-code:
            000 nv Never
            001 >  $[a] >  $[b]
            010 == $[a] == $[b]
            011 >= $[a] >= $[b]
            100 <  $[a] <  $[b]
            101 != $[a] != $[b]
            110 <= $[a] <= $[b]
            111 aw Always

    [operation] $[a] $[b] $[c]
    2 byte
    100 [operation](3 bit) + [register a](3 bit) + [register b](3 bit) + [register c](3 bit) + 0_or_1(1 bit)
        - Operate $[a] and $[b] and save to $[c]
        - operation:
            000 addo
            001 subo
            010 mulo
            011 divo
            100 rmvo  # right move
            101 lmvo  # left move
            110 ando
            111 or_o
        - Not extendable

    exte [value]
    2 byte
    101 + [value](15 bit) + extend_or_not(1 bit)
        - if extend_or_not == 1, [extendable value] = [extendable value] + value
        - value can be extended

    setn [0~7]
    1 byte
    110 + [0~7](3 bit) + 0_or_1(2 bit)
        - Set which of the 8 sub-registers in $N to use

register:
    $A: Address   000
    $C: Condition 001
    $D: Data      010
    $L: Local     011
    $N: Now       100
    $M: Memory    101
    $P: Pointer   110
    $V: Value     111

    # $A, $C, and $V are reserved for instruction-specific operations and should not be set manually.
    # Store results of conditional operations in $C for subsequent branching logic.
    # $N consists of 8 sub-registers (N0 to N7). Use the `setn` instruction to select the active sub-register.
    # $M represents memory. The specific address in memory is determined by the value in $A.
    # $D, $L, $N, and $P are available as general-purpose registers.

syntactic sugar:
    setv $[a] [value]
        input [value]
        copy $V $[a]

    j-if $[a] $[b] [C-code] $[c]
        comp $[b] [C-code] $[c]
        jump $[a] $C

    load $[a] $[b]
        copy $[a] $A
        copy $M $[b]

    stor $[a] $[b]
        copy $[a] $A
        copy $[b] $M

    [operation]i $[a] [value] $[c]
        input [value]
        [operation] $[a] $V $[c]

    setl "[label]"
        - set label

    getl $[a] "[label]"
        - [value] = address of [label]
        setv $[a] [value]

    # The setl and getl instructions are pseudo-instructions managed by the assembler.
