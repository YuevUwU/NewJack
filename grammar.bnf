# NewJack grammar
<code> ::= {<class>}
<class> ::= "class" <identifier'class_name'> "{" {<subroutine>} "}"
<subroutine> ::= ("function" | "method" | "constructor") (<type> | "void") <identifier'name'> "(" (<argument_list> | "pass") ")" "{" <statements> "}"
<type> ::= <identifier'type'> | <built-in_type> ["[" <type> "]"]
<argument_list> ::= <type> <identifier'arg_name'> [{"," <type> <identifier'arg_name'>}]
<statements> ::= ({<statement>} | "pass")
<statement> ::= <var_S> | <let_S> | <do_S> | <if_S> | <while_S> | <for_S> | <return_S>
<var_S> ::= ("var" | "global" | "attr") <type> <identifier'name'> [{"," <identifier'name'>}] ["=" <expression> [{"," <expression>}]] ";"
<let_S> ::= "let" <var> "=" <expression> ";"
<do_S> ::= "do" <call> ";"
<if_S> ::= "if" "(" <conditional> ")" "{" <statements> "}" [{"elif" "(" <conditional> ")" "{" <statements> "}"}] ["else" "{" <statements> "}"]
<while_S> ::= "while" "(" <conditional> ")" "{" (<statements> | <break_S> | <continue_S>) "}"
<for_S> ::= "for" "(" <identifier'name'> "," <expression> ["," <conditional> "," <expression>] ")" "{" (<statements> | <break_S> | <continue_S>) "}" ["else" "{" <statements> "}"]
<return_S> ::= "return" [<expression>] ";"
<break_S> ::= "break" [<Integer>] ";"
<continue_S> ::= "continue" ";"
<var> ::= <identifier'var'> | <var> "." <identifier'attr'> | <var> "[" <integer> "]"
<expression> ::= <term> [{<operator> <term>}]
<term> ::= <string> | <integer> | <float> | <keyword_content> | ("-" | "!") <term> | <call> | <var> | "(" <expression> ")" | <conditional>
<call> ::= <var> "(" (<expression> [{"," <expression>}] | "pass") ")"
<conditional> ::= <expression> <logical_operator> <expression>

# terminal symbol:
<identifier> ::= (<a-z> | <A-Z> | "_") {(<a-z> | <A-Z> | "_" | <0-9>)}
<a-z> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k"
        | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<A-Z> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K"
        | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
<0-9> ::= "0" | <1-9>
<1-9> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<built-in_type> ::= "int" | "bool" | "char" | "str" | "list" | "arr" | "float"
<keyword> ::= "class" | "var" | "describe" | "constructor" | "function" | "method" | "void" | "pass" | <keyword_content>
            | "let" | "do" | "if" | "elif" | "else" | "while" | "return" | "for" | "break" | "continue" | <built-in_type>
            | "global" | "attr"
<keyword_content> ::= "false" | "true" | "self"
<symbol> ::= "{" | "}" | "[" | "]" | "(" | ")" | "=" | ";" | "," | "." | <operator> | "!"
<operator> ::= "+" | "-" | "*" | "/" | <logical_operator> | "|" | "&" | "<<" | ">>"
<logical_operator> ::= "==" | "!=" | ">=" | "<=" | ">" | "<"
<string> ::= '"' {unicode_characters} '"' # Disable line breaks
<char> ::= "'" unicode_characters "'"
<integer> ::= ["-"] <1-9> {<0-9>} | "0"
<float> ::= ["-"] {<0-9>} "." {<0-9>}
<comment> ::= "#" <string> | "`" <string> "`"

# 優先級 運算符  描述
# 1      ! -    邏輯not與取負數
# 2      * /    乘除法
# 3      + -    加减法
# 4      << >>  左右移
# 5      <  <=  < 與 ≤
# 5      >  >=  > 與 ≥
# 6      == !=  = 與 ≠
# 7      &      邏輯and
# 8      |      邏輯or
