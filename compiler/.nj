class math {
    function int gcd(int a, int b) {
        var int t;
        while(b != 0) {
            let t = b;
            let b = math.mod(a, b);
            let a = t;
        }
        return a;
    }
    function int abs(int a) {
        if(a < 0) {
            return - a;
        }
        return a;
    }
    function int pow(int a, int b) {
        var int res = 1;
        while(b > 0) {
            if(math.mod(b, 2) == 1) {
                let res = res * a;
            }
            let a = a * a;
            let b = b / 2;
        }
        return res;
    }
    function int max(int a, int b) {
        if(a > b) {
            return a;
        }
        return b;
    }
    function int min(int a, int b) {
        if(a < b) {
            return a;
        }
        return b;
    }
    function int mod(int a, int b) {
        while(a >= b) {
            let a = a - b;
        }
        return a;
    }
}
class float {
    descript {
        a: int;
        b: int;
    }
    constructor float new(int a, int b) {
        if(b == 0) {
            print("Error: Division by zero");
            return self;
        }
        var bool neg = false;
        if((b < 0 & a > 0) | (b > 0 & a < 0)) {
            neg = true;
        }
        var int t = math.gcd(a, b);
        let self.a = a / t;
        let self.b = b / t;
        if(neg) {
            let self.a = - self.a;
        }
        return self;
    }
    function float add_float(float a, float b) {
        var int a, b = a.a * f.b + f.a * a.b, a.b * f.b;
        return float.new(a, b);
    }
    function float sub_float(float a, float b) {
        var int a, b = a.a * b.b - b.a * a.b, a.b * b.b;
        return float.new(a, b);
    }
    function float mul_float(float a, float b) {
        var int a, b = a.a * b.a, a.b * b.b;
        return float.new(a, b);
    }
    function float div_float(float a, float b) {
        var int a, b = a.a * b.b, a.b * b.a;
        return float.new(a, b);
    }
    function bool eq_float(float a, float b) {
        return a.a * b.b == b.a * a.b;
    }
    function bool neq_float(float a, float b) {
        return a.a * b.b != b.a * a.b;
    }
    function bool geq_float(float a, float b) {
        return a.a * b.b >= b.a * a.b;
    }
    function bool leq_float(float a, float b) {
        return a.a * b.b <= b.a * a.b;
    }
    function bool gt_float(float a, float b) {
        return a.a * b.b > b.a * a.b;
    }
    function bool lt_float(float a, float b) {
        return a.a * b.b < b.a * a.b;
    }
    function float add_int(float a, int b) {
        return float.new(a.a + b * a.b, a.b);
    }
    function float sub_int(float a, int b) {
        return float.new(a.a - b * a.b, a.b);
    }
    function float mul_int(float a, int b) {
        return float.new(a.a * b, a.b);
    }
    function float div_int(float a, int b) {
        return float.new(a.a, a.b * b);
    }
    function bool eq_int(float a, int b) {
        return a.a == a.b * b;
    }
    function bool neq_int(float a, int b) {
        return a.a != a.b * b;
    }
    function bool geq_int(float a, int b) {
        return a.a >= a.b * b;
    }
    function bool leq_int(float a, int b) {
        return a.a <= a.b * b;
    }
    function bool gt_int(float a, int b) {
        return a.a > a.b * b;
    }
    function bool lt_int(float a, int b) {
        return a.a < a.b * b;
    }
    method float neg() {
        return float.new(- self.a, self.b);
    }
}
class char {
    descript {
        a: int;
    }
    constructor char new(int a) {
        let self.a = a;
        return self;
    }
}
class str {
    descript {
        a: list[char];
    }
    constructor str new(list[char] a) {
        let self.a = a;
        return self;
    }
    method void add_char(char c) {
        do self.a.append(c);
        return;
    }
    method void add_str(str s) {
        for(i, s.a.size()) {
            do self.a.append(s.a[i]);
        }
        return;
    }
    method str format(list[str] s) {
        var int j = 0;
        var list[char] result = list.new();
        for(i, self.a.size()) {
            if(self.a[i].a == '%') {
                for(k, s[j].a.size()) {
                    result.append(s[j].a[k]);
                }
                let j = j + 1;
            }
            else {
                result.append(self.a[i]);
            }
        }
    }
}
class list {
    descript {
        data: arr[int];
        max_size: int;
        size: int;
    }
    constructor list new() {
        let self.data = arr.new(10);
        let self.max_size = 10;
        let self.size = 0;
        return self;
    }
    method void append(int a) {
        if(self.size == self.max_size) {
            self.get_memory();
        }
        let self.data[self.size] = a;
        let self.size = self.size + 1;
        return;
    }
    method void get_memory() {
        let self.max_size = self.max_size * 2;
        var arr[int] new_data = arr.new(self.max_size);
        for(i, self.size) {
            let new_data[i] = self.data[i];
        }
        let self.data = new_data;
        return;
    }
    method int get(int i) {
        return self.data[i];
    }
    method void set(int i, int a) {
        let self.data[i] = a;
        return;
    }
    method int size() {
        return self.size;
    }
}